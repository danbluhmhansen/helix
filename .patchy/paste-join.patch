From 0a8e452925a0b4e065cd2b986af9c36f955fe68c Mon Sep 17 00:00:00 2001
From: Dan Bluhm Hansen <00.pavers_dither@icloud.com>
Date: Sat, 19 Jul 2025 09:08:38 +0200
Subject: [PATCH] Squashed commit of the following:

commit 9e72279b099942510d25e1a70f8684cb44e4faa4
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Tue May 27 16:05:01 2025 +0100

    test: remove tests for removed default keybindings

commit ae16bbb32c408ae8af3f204c7d30359827304888
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Tue May 27 15:53:01 2025 +0100

    feat: remove the default keybindings

commit 8b8a7315146333fd33bfc6ff9d0589dcd57f80ef
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Sun May 25 16:31:24 2025 +0100

    fix: incorrect order of parameters

commit fe4202e161b8bb13a1c824b0536657c142c06d52
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Sat May 24 19:01:03 2025 +0100

    feat: Add default keymap for `yank_joined`

commit 401bdd0c583a02fac14c9ad671aef0554abf7c9c
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Sat May 24 18:10:38 2025 +0100

    feat: Add static commands for paste-join

commit d8dabfbe52881f38556b9ff67b64a0a98fa7dc8f
Author: Nik Revenco <154856872+NikitaRevenco@users.noreply.github.com>
Date:   Fri May 23 19:52:56 2025 +0100

    feat: New command `:paste-join`
---
 book/src/generated/static-cmd.md             |   3 +
 book/src/generated/typable-cmd.md            |   1 +
 helix-term/src/commands.rs                   | 107 +++++++++++++---
 helix-term/src/commands/typed.rs             | 118 +++++++++++++++++
 helix-term/tests/test/commands.rs            |   1 +
 helix-term/tests/test/commands/paste_join.rs | 126 +++++++++++++++++++
 6 files changed, 339 insertions(+), 17 deletions(-)
 create mode 100644 helix-term/tests/test/commands/paste_join.rs

diff --git a/book/src/generated/static-cmd.md b/book/src/generated/static-cmd.md
index 7486d46f..20478e23 100644
--- a/book/src/generated/static-cmd.md
+++ b/book/src/generated/static-cmd.md
@@ -206,6 +206,9 @@
 | `paste_clipboard_before` | Paste clipboard before selections | normal: `` <space>P ``, select: `` <space>P `` |
 | `paste_primary_clipboard_after` | Paste primary clipboard after selections |  |
 | `paste_primary_clipboard_before` | Paste primary clipboard before selections |  |
+| `paste_before_joined_with_newline` | Join all selections with a newline and paste before cursor |  |
+| `paste_after_joined_with_newline` | Join all selections with a newline and paste after cursor |  |
+| `replace_joined_with_newline` | Replace selection with all selections joined with a newline |  |
 | `indent` | Indent selection | normal: `` <gt> ``, select: `` <gt> `` |
 | `unindent` | Unindent selection | normal: `` <lt> ``, select: `` <lt> `` |
 | `format_selections` | Format selection | normal: `` = ``, select: `` = `` |
diff --git a/book/src/generated/typable-cmd.md b/book/src/generated/typable-cmd.md
index 285ce267..ef74d669 100644
--- a/book/src/generated/typable-cmd.md
+++ b/book/src/generated/typable-cmd.md
@@ -33,6 +33,7 @@
 | `:cquit!`, `:cq!` | Force quit with exit code (default 1) ignoring unsaved changes. Accepts an optional integer exit code (:cq! 2). |
 | `:theme` | Change the editor theme (show current theme if no name specified). |
 | `:yank-join`, `:yj` | Yank the selections joined with a separator |
+| `:paste-join`, `:pj` | Join selections with a separator and paste |
 | `:clipboard-yank` | Yank main selection into system clipboard. |
 | `:primary-clipboard-yank` | Yank main selection into system primary clipboard. |
 | `:clipboard-paste-after` | Paste system clipboard after selections. |
diff --git a/helix-term/src/commands.rs b/helix-term/src/commands.rs
index 5cccb915..e46e5737 100644
--- a/helix-term/src/commands.rs
+++ b/helix-term/src/commands.rs
@@ -75,6 +75,7 @@
     future::Future,
     io::Read,
     num::NonZeroUsize,
+    str::FromStr,
 };
 
 use std::{
@@ -215,6 +216,10 @@ pub enum MappableCommand {
     },
     Static {
         name: &'static str,
+        // TODO: Change the signature to
+        // fn(cx: &mut Context) -> anyhow::Result<()>
+        //
+        // Then handle the error by using `Editor::set_error` in a single place
         fun: fn(cx: &mut Context),
         doc: &'static str,
     },
@@ -505,6 +510,9 @@ pub fn doc(&self) -> &str {
         paste_clipboard_before, "Paste clipboard before selections",
         paste_primary_clipboard_after, "Paste primary clipboard after selections",
         paste_primary_clipboard_before, "Paste primary clipboard before selections",
+        paste_before_joined_with_newline, "Join all selections with a newline and paste before cursor",
+        paste_after_joined_with_newline, "Join all selections with a newline and paste after cursor",
+        replace_joined_with_newline, "Replace selection with all selections joined with a newline", 
         indent, "Indent selection",
         unindent, "Unindent selection",
         format_selections, "Format selection",
@@ -4626,6 +4634,35 @@ enum Paste {
     Cursor,
 }
 
+/// Where to paste joined selections
+#[derive(Copy, Clone, Default)]
+pub enum PasteJoined {
+    /// Paste before the cursor
+    Before,
+    /// Paste after the cursor
+    #[default]
+    After,
+    /// Replace the selection with cursor
+    Replace,
+}
+
+impl PasteJoined {
+    const VARIANTS: [&'static str; 3] = ["before", "after", "replace"];
+}
+
+impl FromStr for PasteJoined {
+    type Err = anyhow::Error;
+
+    fn from_str(s: &str) -> Result<Self, Self::Err> {
+        match s {
+            "before" => Ok(Self::Before),
+            "after" => Ok(Self::After),
+            "replace" => Ok(Self::Replace),
+            _ => Err(anyhow!("Invalid paste position: {s}")),
+        }
+    }
+}
+
 static LINE_ENDING_REGEX: Lazy<Regex> = Lazy::new(|| Regex::new(r"\r\n|\r|\n").unwrap());
 
 fn paste_impl(
@@ -4753,17 +4790,25 @@ fn replace_with_yanked(cx: &mut Context) {
 }
 
 fn replace_with_yanked_impl(editor: &mut Editor, register: char, count: usize) {
-    let Some(values) = editor
-        .registers
-        .read(register, editor)
-        .filter(|values| values.len() > 0)
-    else {
+    let scrolloff = editor.config().scrolloff;
+
+    let Some(values) = editor.registers.read(register, editor) else {
         return;
     };
-    let scrolloff = editor.config().scrolloff;
-    let (view, doc) = current_ref!(editor);
+    let yanked = values.map(|value| value.to_string()).collect::<Vec<_>>();
+    let (view, doc) = current!(editor);
 
-    let map_value = |value: &Cow<str>| {
+    replace_impl(&yanked, doc, view, count, scrolloff)
+}
+
+fn replace_impl(
+    values: &[String],
+    doc: &mut Document,
+    view: &mut View,
+    count: usize,
+    scrolloff: usize,
+) {
+    let map_value = |value: &String| {
         let value = LINE_ENDING_REGEX.replace_all(value, doc.line_ending.as_str());
         let mut out = Tendril::from(value.as_ref());
         for _ in 1..count {
@@ -4771,14 +4816,12 @@ fn replace_with_yanked_impl(editor: &mut Editor, register: char, count: usize) {
         }
         out
     };
-    let mut values_rev = values.rev().peekable();
-    // `values` is asserted to have at least one entry above.
-    let last = values_rev.peek().unwrap();
+    let mut values_rev = values.iter().rev().peekable();
+    let Some(last) = values_rev.peek() else {
+        return;
+    };
     let repeat = std::iter::repeat(map_value(last));
-    let mut values = values_rev
-        .rev()
-        .map(|value| map_value(&value))
-        .chain(repeat);
+    let mut values = values_rev.rev().map(map_value).chain(repeat);
     let selection = doc.selection(view.id);
     let transaction = Transaction::change_by_selection(doc.text(), selection, |range| {
         if !range.is_empty() {
@@ -4787,9 +4830,7 @@ fn replace_with_yanked_impl(editor: &mut Editor, register: char, count: usize) {
             (range.from(), range.to(), None)
         }
     });
-    drop(values);
 
-    let (view, doc) = current!(editor);
     doc.apply(&transaction, view.id);
     doc.append_changes_to_history(view);
     view.ensure_cursor_in_view(doc, scrolloff);
@@ -6639,6 +6680,38 @@ fn replay_macro(cx: &mut Context) {
     }));
 }
 
+fn paste_before_joined_with_newline(cx: &mut Context) {
+    if let Err(err) = paste_joined_impl(
+        cx.editor,
+        cx.count(),
+        PasteJoined::Before,
+        cx.register,
+        None,
+    ) {
+        cx.editor.set_error(err.to_string());
+    };
+}
+
+fn paste_after_joined_with_newline(cx: &mut Context) {
+    if let Err(err) =
+        paste_joined_impl(cx.editor, cx.count(), PasteJoined::After, cx.register, None)
+    {
+        cx.editor.set_error(err.to_string());
+    };
+}
+
+fn replace_joined_with_newline(cx: &mut Context) {
+    if let Err(err) = paste_joined_impl(
+        cx.editor,
+        cx.count(),
+        PasteJoined::Replace,
+        cx.register,
+        None,
+    ) {
+        cx.editor.set_error(err.to_string());
+    };
+}
+
 fn goto_word(cx: &mut Context) {
     jump_to_word(cx, Movement::Move)
 }
diff --git a/helix-term/src/commands/typed.rs b/helix-term/src/commands/typed.rs
index 8bcde976..64e95074 100644
--- a/helix-term/src/commands/typed.rs
+++ b/helix-term/src/commands/typed.rs
@@ -1,5 +1,6 @@
 use std::fmt::Write;
 use std::io::BufReader;
+use std::num::NonZero;
 use std::ops::{self, Deref};
 
 use crate::job::Job;
@@ -1034,6 +1035,86 @@ fn yank_main_selection_to_clipboard(
     Ok(())
 }
 
+pub fn paste_joined_impl(
+    editor: &mut Editor,
+    count: usize,
+    paste_position: PasteJoined,
+    register: Option<char>,
+    separator: Option<&str>,
+) -> anyhow::Result<()> {
+    let config = editor.config();
+    let register = register.unwrap_or(config.default_yank_register);
+    let scrolloff = config.scrolloff;
+
+    let register_values = editor
+        .registers
+        .read(register, editor)
+        .ok_or_else(|| anyhow!("Register {register} is empty"))?;
+
+    let doc = doc!(editor);
+    let separator = separator.unwrap_or_else(|| doc.line_ending.as_str());
+
+    // Intersperse register values with a separator
+    let paste = register_values.fold(String::new(), |mut pasted, value| {
+        if !pasted.is_empty() {
+            pasted.push_str(separator);
+        }
+        pasted.push_str(&value);
+        pasted
+    });
+
+    let (view, doc) = current!(editor);
+
+    match paste_position {
+        PasteJoined::Before => paste_impl(&[paste], doc, view, Paste::Before, count, editor.mode),
+        PasteJoined::After => paste_impl(&[paste], doc, view, Paste::After, count, editor.mode),
+        PasteJoined::Replace => replace_impl(&[paste], doc, view, count, scrolloff),
+    }
+
+    Ok(())
+}
+
+fn paste_joined(
+    cx: &mut compositor::Context,
+    args: Args,
+    event: PromptEvent,
+) -> anyhow::Result<()> {
+    if event != PromptEvent::Validate {
+        return Ok(());
+    }
+
+    let count = args
+        .get_flag("count")
+        .map(|count| count.parse::<NonZero<usize>>())
+        .transpose()?
+        .map_or(1, |count| count.get());
+
+    let paste_position = args
+        .get_flag("position")
+        .map(|pos| pos.parse::<PasteJoined>())
+        .transpose()?
+        .unwrap_or_default();
+
+    let register = args
+        .get_flag("register")
+        .map(|reg| {
+            reg.parse::<char>()
+                .map_err(|_| anyhow!("Invalid register: {reg}"))
+        })
+        .transpose()?
+        .or(cx.editor.selected_register);
+
+    paste_joined_impl(
+        cx.editor,
+        count,
+        paste_position,
+        register,
+        args.get_flag("separator"),
+    )?;
+
+    Ok(())
+}
+
 fn yank_joined(cx: &mut compositor::Context, args: Args, event: PromptEvent) -> anyhow::Result<()> {
     if event != PromptEvent::Validate {
         return Ok(());
@@ -3010,6 +3091,43 @@ fn noop(_cx: &mut compositor::Context, _args: Args, _event: PromptEvent) -> anyh
             ..Signature::DEFAULT
         },
     },
+    TypableCommand {
+        name: "paste-join",
+        aliases: &["pj"],
+        doc: "Join selections with a separator and paste",
+        fun: paste_joined,
+        completer: CommandCompleter::none(),
+        signature: Signature {
+            positionals: (0, Some(0)),
+            flags: &[
+                Flag {
+                    name: "separator",
+                    alias: Some('s'),
+                    doc: "Separator between joined selections (Default: newline)",
+                    completions: Some(&[])
+                },
+                Flag {
+                    name: "count",
+                    alias: Some('c'),
+                    doc: "How many times to paste",
+                    completions: Some(&[])
+                },
+                Flag {
+                    name: "position",
+                    alias: Some('p'),
+                    doc: "Location of where to paste",
+                    completions: Some(&PasteJoined::VARIANTS)
+                },
+                Flag {
+                    name: "register",
+                    alias: Some('r'),
+                    doc: "Paste from this register",
+                    completions: Some(&[])
+                }
+            ],
+            ..Signature::DEFAULT
+        },
+    },
     TypableCommand {
         name: "yank-join",
         aliases: &["yj"],
diff --git a/helix-term/tests/test/commands.rs b/helix-term/tests/test/commands.rs
index 89b6a68b..f3e04598 100644
--- a/helix-term/tests/test/commands.rs
+++ b/helix-term/tests/test/commands.rs
@@ -4,6 +4,7 @@
 
 mod insert;
 mod movement;
+mod paste_join;
 mod write;
 mod yank_join;
 
diff --git a/helix-term/tests/test/commands/paste_join.rs b/helix-term/tests/test/commands/paste_join.rs
new file mode 100644
index 00000000..828481da
--- /dev/null
+++ b/helix-term/tests/test/commands/paste_join.rs
@@ -0,0 +1,126 @@
+use super::*;
+
+const IN: &str = indoc! {"\
+    #[o|]#ne
+    #(t|)#wo
+    three
+"};
+
+#[tokio::test(flavor = "multi_thread")]
+async fn after() -> anyhow::Result<()> {
+    test((
+        IN,
+        "y:paste-join<ret>",
+        indoc! {"\
+            o#[o
+            t|]#ne
+            t#(o
+            t|)#wo
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
+
+#[tokio::test(flavor = "multi_thread")]
+async fn before() -> anyhow::Result<()> {
+    test((
+        IN,
+        "y:paste-join --position before<ret>",
+        indoc! {"\
+            #[o
+            t|]#one
+            #(o
+            t|)#two
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
+
+#[tokio::test(flavor = "multi_thread")]
+async fn replace() -> anyhow::Result<()> {
+    test((
+        IN,
+        "y:paste-join --position replace<ret>",
+        indoc! {"\
+            #[o
+            t|]#ne
+            #(o
+            t|)#wo
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
+
+#[tokio::test(flavor = "multi_thread")]
+async fn flag_count() -> anyhow::Result<()> {
+    test((
+        IN,
+        "y:paste-join --count 4<ret>",
+        indoc! {"\
+            o#[o
+            to
+            to
+            to
+            t|]#ne
+            t#(o
+            to
+            to
+            to
+            t|)#wo
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
+
+#[tokio::test(flavor = "multi_thread")]
+async fn flag_register() -> anyhow::Result<()> {
+    test((
+        IN,
+        concat!(
+            // Copy content from another place, so our default
+            // register has different content to what we will
+            // have in register 'x'
+            "jlykh",
+            // Pasting from 'x' does not paste from the default register
+            "\"xy:paste-join --register x<ret>"
+        ),
+        indoc! {"\
+            o#[o
+            t|]#ne
+            t#(o
+            t|)#wo
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
+
+#[tokio::test(flavor = "multi_thread")]
+async fn flag_separator() -> anyhow::Result<()> {
+    test((
+        IN,
+        "y:paste-join --separator x<ret>",
+        indoc! {"\
+            o#[oxt|]#ne
+            t#(oxt|)#wo
+            three
+        "},
+    ))
+    .await?;
+
+    Ok(())
+}
-- 
2.48.1

